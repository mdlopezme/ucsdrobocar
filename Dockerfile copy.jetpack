FROM nvcr.io/nvidia/l4t-base:r35.1.0
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# Install any utils needed for execution
RUN apt-get update && apt-get install -y --no-install-recommends \
    sudo \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install nvidia-cuda-dev for CUDA developer packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    nvidia-cuda-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install nvidia-cudnn8-dev for CuDNN developer packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    nvidia-cudnn8-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install nvidia-tensorrt-dev for TensorRT developer packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    nvidia-tensorrt-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install nvidia-vpi-dev for VPI developer packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    nvidia-vpi-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install nvidia-opencv-dev for OpenCV developer packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    nvidia-opencv-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Multimedia API samples & libs
RUN apt-get update && apt-get download nvidia-l4t-jetson-multimedia-api \
    && dpkg-deb -R ./nvidia-l4t-jetson-multimedia-api_*_arm64.deb ./mm-api \
    && cp -r ./mm-api/usr/src/jetson_multimedia_api /usr/src/jetson_multimedia_api \
    && ./mm-api/DEBIAN/postinst \
    && rm -rf ./nvidia-l4t-jetson-multimedia-api_*_arm64.deb ./mm-api

#Update libraries
RUN ldconfig 

# Setup environment variables
ENV CUDA_HOME="/usr/local/cuda"
ENV PATH="/usr/local/cuda/bin:${PATH}"
ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH}"

######## DONKEYCAR FRAMEWORK ############
# Install System-Wide Dependencies
RUN apt-get update -y
RUN apt-get upgrade -y
RUN apt-get install -y libhdf5-serial-dev hdf5-tools libhdf5-dev zlib1g-dev zip libjpeg8-dev liblapack-dev libblas-dev gfortran
RUN apt-get install -y python3-dev python3-pip
RUN apt-get install -y libxslt1-dev libxml2-dev libffi-dev libcurl4-openssl-dev libssl-dev libpng-dev libopenblas-dev
RUN apt-get install -y git nano
RUN apt-get install -y openmpi-doc openmpi-bin libopenmpi-dev libopenblas-dev

# # Setup Virtual Environment
# RUN apt install python3.8-venv
# ENV VIRTUAL_ENV=/opt/venv
# RUN python3 -m venv $VIRTUAL_ENV
# ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Setup Python Dependencies
# No AARCH64 Image for h5py==2.10.0
RUN pip3 install -U h5py
RUN pip3 install -U pip testresources setuptools
RUN pip3 install -U futures==3.1.1 protobuf==3.12.2 pybind11==2.5.0
RUN pip3 install -U cython==0.29.21 pyserial
RUN pip3 install -U future==0.18.2 mock==4.0.2 keras_preprocessing==1.1.2 keras_applications==1.0.8 gast==0.3.3
RUN pip3 install -U absl-py==0.9.0 py-cpuinfo==7.0.0 psutil==5.7.2 portpicker==1.3.1 six requests==2.24.0 astor==0.8.1 termcolor==1.1.0 wrapt==1.12.1 google-pasta==0.2.0
RUN pip3 install -U gdown
# This will install tensorflow as a system package
RUN wget https://developer.download.nvidia.com/compute/redist/jp/v502/tensorflow/tensorflow-2.9.1+nv22.09-cp38-cp38-linux_aarch64.whl
RUN pip install tensorflow-2.9.1+nv22.09-cp38-cp38-linux_aarch64.whl
# RUN pip3 install --pre --extra-index-url https://developer.download.nvidia.com/compute/redist/jp/v45/tensorflow tensorflow==2.3.1

# Install Pytorch
RUN wget https://developer.download.nvidia.com/compute/redist/jp/v502/pytorch/torch-1.13.0a0+d0d6b1f2.nv22.10-cp38-cp38-linux_aarch64.whl
RUN pip3 install torch-1.13.0a0+d0d6b1f2.nv22.10-cp38-cp38-linux_aarch64.whl
RUN sudo apt-get install libjpeg-dev zlib1g-dev libpython3-dev libavcodec-dev libavformat-dev libswscale-dev
WORKDIR /projects
RUN git clone -b v0.9.0 https://github.com/pytorch/vision torchvision
WORKDIR /projects/torchvision 
CMD python setup.py install
RUN cd ../

# Install Donkeycar Python Code
RUN cd /projects
RUN git clone https://github.com/autorope/donkeycar
RUN cd donkeycar
RUN git fetch --all --tags -f
RUN latestTag=$(git describe --tags `git rev-list --tags --max-count=1`)
RUN git checkout $latestTag
RUN pip3 install -e .[nano]

RUN pip3 install --no-cache git+https://github.com/sisaha9/PyVESC.git@sid-devel

RUN apt install -y curl

RUN git clone https://github.com/luxonis/depthai.git && \
    git clone https://github.com/luxonis/depthai-python.git && \
    cd depthai && \
    curl -fL https://docs.luxonis.com/install_dependencies.sh | bash && \
    python3 install_requirements.py && \
    cd ../depthai-python/examples && \
    python3 install_requirements.py 

# RUN git clone https://github.com/sisaha9/donkeycar.git -b sid_devel && \
#     cd donkeycar && \
#     DEBIAN_FRONTEND=noninteractive pip3 install -U --no-cache install -e .[pc]

# RUN git clone https://github.com/sisaha9/gym-donkeycar -b sid_devel && \
#     cd gym-donkeycar && \
#     DEBIAN_FRONTEND=noninteractive pip3 install -U --no-cache install -e .[gym-donkeycar]

CMD ["/bin/bash"]